#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "../zmk-nodefree-config/helper.h"

#define DEF 0
#define LOWER 1
#define RAISE 2

#define HYPER LS(LC(LA(LGUI)))
#define MEH LS(LC(LALT))

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&comma_inner_morph>;
)
ZMK_BEHAVIOR(comma_inner_morph, mod_morph,
    bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
    mods = <(MOD_LCTL|MOD_RCTL)>;
)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&dot_inner_morph>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_inner_morph, mod_morph,
    bindings = <&kp COLON>, <&kp GREATER_THAN>;
    mods = <(MOD_LCTL|MOD_RCTL)>;
)

// tap: qmark | shift + tap: excl
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp QMARK>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_BEHAVIOR(lt_spc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    bindings = <&mo>, <&spc_morph>;
)
ZMK_BEHAVIOR(spc_morph, mod_morph,
    bindings = <&kp SPACE>, <&dot_spc>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)


/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };
};


/ {
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
    };
};


/ {
    macros {
      pastey: pastey {
        compatible = "zmk,behavior-macro";
        label = "PASTEY";
        #binding-cells = <0>;
        bindings
          = <&macro_tap &kp K_PASTE>
          , <&macro_tap &kp RET>
          ;
      };

      la: left_arrow {
        compatible = "zmk,behavior-macro";
        label = "LEFT_ARROW";
        #binding-cells = <0>;
        bindings
          = <&macro_tap &kp MINUS>
          , <&macro_tap &kp GT>
          , <&macro_tap &kp SPACE>
          ;
      };
    };

    behaviors {
      lh_pht: left_hand_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "LEFT_POSITIONAL_TAP";
        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <150>;
        flavor = "balanced";
        global-quick-tap;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        hold-trigger-on-release;
      };
      rh_pht: riht_hand_positional_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "RIGHT_POSITIONAL_TAP";
        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <150>;
        flavor = "balanced";
        global-quick-tap;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
        hold-trigger-on-release;
      };

      tdv: tap_dance_v {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_V";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp V>, <&pastey>;
      };
    };



    keymap {
      compatible = "zmk,keymap";

      default_layer {
        label = "UwU";
        bindings = <
          &kp Q           &kp W           &kp F           &kp P           &kp B     &kp J &kp L           &kp U           &kp Y           &trans
          &lh_pht LSHFT A &lh_pht LCTRL R &lh_pht LALT S  &lh_pht LGUI T  &kp G     &kp M &rh_pht RGUI N  &rh_pht RALT E  &rh_pht RCTRL I &rh_pht RSHFT O
          &kp Z           &kp X           &kp C           &kp D           &tdv      &kp K &kp H           &comma_morph    &dot_morph      &qexcl
                          &kp HYPER &kp TAB &lt_spc RAISE                          &lt LOWER BKSP &kp RET &kp MEH
        >;
      };

      lower_layer {
        label = "lower";
        bindings = <
          &trans    &kp PERCENT &kp LBRC  &kp RBRC &trans           &trans      &kp AMPS  &kp PIPE  &kp HASH  &trans
          &kp ESC   &kp BSLH    &kp LPAR  &kp RPAR &kp CARET        &kp DOLLAR  &kp MINUS &kp UNDER &kp FSLH  &kp EQUAL 
          &kp TILDE &trans      &kp LBKT  &kp RBKT &trans           &trans      &kp AT    &trans    &la       &caps_word
                    &trans      &trans    &trans                                &trans    &trans    &trans 
        >;
      };

      raise_layer {
        label = "raise";
        bindings = <
          &kp FSLH  &kp N7  &kp N8  &kp N9  &kp STAR                &trans  &bt BT_PRV  &bt BT_NXT  &trans &bt BT_CLR 
          &kp N0    &kp N4  &kp N5  &kp N6  &kp PLUS                &trans  &kp LEFT    &kp DOWN    &kp UP &kp RIGHT
          &kp EQUAL &kp N1  &kp N2  &kp N3  &kp MINUS               &trans  &trans      &trans      &trans &trans 
                    &trans  &trans  &trans                                  &trans      &trans      &trans 
        >;
      };
  };
};